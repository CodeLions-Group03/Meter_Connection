/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package powermetermodbus;

import cloudConnector.DBConnection;
import com.intelligt.modbus.jlibmodbus.exception.ModbusIOException;
import com.intelligt.modbus.jlibmodbus.exception.ModbusNumberException;
import com.intelligt.modbus.jlibmodbus.exception.ModbusProtocolException;
import com.intelligt.modbus.jlibmodbus.master.ModbusMaster;

import com.jtattoo.plaf.aluminium.AluminiumLookAndFeel;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import powerMeterConnector.PMconnection;


public class CloudPowerMeterInterface extends javax.swing.JFrame {

    /**
     * Creates new form CloudPowerMeterInterface
     */
    public Connection conn=null;
    public PreparedStatement stm=null;
    ModbusMaster master=null;
    public CloudPowerMeterInterface() {
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        initialize();
       
    }
    private void initialize(){
        //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("")));ï»¿
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/images.jpg")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ipText = new javax.swing.JTextField();
        userText = new javax.swing.JTextField();
        cloudButton = new javax.swing.JButton();
        cloudStatusText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        databaseText = new javax.swing.JTextField();
        passText = new javax.swing.JPasswordField();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        unitText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        timeText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        voltageText = new javax.swing.JTextField();
        meterStatusText = new javax.swing.JTextField();
        uploadButton = new javax.swing.JButton();
        uploadText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        accountNumText = new javax.swing.JTextField();
        meterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" CEB Cloud Power Meter Interface V1.3");
        setBackground(new java.awt.Color(204, 204, 204));
        setIconImages(null);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setAutoscrolls(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Password :");

        jLabel2.setText("Username :");

        jLabel1.setText("Ip & port :");

        ipText.setText("ceb03.database.windows.net");

        userText.setText("dhanushka");

        cloudButton.setText("Connect to Cloud");
        cloudButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cloudButtonActionPerformed(evt);
            }
        });

        cloudStatusText.setEditable(false);

        jLabel11.setText("Database :");

        databaseText.setText("CEB");

        passText.setText("Sandu@2019");
        passText.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userText)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cloudButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cloudStatusText))
                            .addComponent(ipText, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(databaseText))
                        .addGap(11, 11, 11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(passText)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(databaseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cloudButton)
                    .addComponent(cloudStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Power Meter Readings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel5.setText("Date");

        jLabel6.setText("Units:");

        dateText.setEditable(false);

        jLabel8.setText("Time");

        unitText.setEditable(false);

        jLabel9.setText("kWh");

        timeText.setEditable(false);

        jLabel4.setText("Volatge");

        voltageText.setEditable(false);
        voltageText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltageTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(voltageText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(32, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(unitText, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(voltageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(unitText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9))
        );

        meterStatusText.setEditable(false);

        uploadButton.setText("Upload Data");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        uploadText.setEditable(false);

        jLabel10.setText("Com Port Status :");

        jLabel13.setText("Account No :");

        meterButton.setText("Connect to Power Meter");
        meterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(uploadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadText))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(accountNumText, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                            .addComponent(meterStatusText)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(meterButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(accountNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadButton)
                    .addComponent(uploadText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("CEB Cloud Power Meter Interface V1.3");
        getAccessibleContext().setAccessibleDescription("BCS University Of Ruhuna");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void meterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meterButtonActionPerformed
        master= PMconnection.getInstance();
        if(master!=null){
            meterStatusText.setText("Connected");
        }else{
            meterStatusText.setText("No Connection");
        }
    }//GEN-LAST:event_meterButtonActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        if(conn!=null/*&&master!=null*/){
            Thread thread =new Thread(){
                @Override
                public void run(){

                    while(conn!=null/*&&master!=null*/){
                        uploadButton.setEnabled(false);
                        try {
                            Thread.sleep(2000);
                            uploadText.setText("Cloud");
                            master.connect();

                            int[] registerValues = master.readInputRegisters(1,330,14);

                            // print values
//                            int i=0;
//                            for (int value : registerValues) {
//
//                                System.out.println(""+i+" Value: " + value);
//                                i++;
//                                i=i%56;
//                            }

                            //  double voltage=registerValues[0]-17024;
                            //  double amperage=registerValues[6]/15000;
                            int unitsReg1=registerValues[12];
                            int unitsReg2=registerValues[13];
                            float units=getRealRegisterValue(unitsReg1,unitsReg2);
                            
                            int[] registerValuesVol=master.readInputRegisters(1,0, 12);
                            int volReg1=registerValuesVol[0];
                            int volReg2=registerValuesVol[1];
                            float voltage=getRealRegisterValue(volReg1, volReg2);

                            //double current=registerValues[1];
                            // double imp=registerValues[8];
                            //double emp=registerValues[13];
                            System.out.println(" units"+units);

                            // stm.setObject(1,meterIdText.getText()); //meter id
                            //acount id

                            /*DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
                            LocalDateTime now = LocalDateTime.now();
                            System.out.println(dtf.format(now));*/
                            long millis=System.currentTimeMillis();
                            java.sql.Date date=new java.sql.Date(millis);
                            java.sql.Time time=new Time(millis);

                            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                            LocalDateTime now = LocalDateTime.now();

                            stm.setInt(1,Integer.parseInt(accountNumText.getText())); // acount id
                            stm.setObject(2,dtf.format(now)); //value
                            dateText.setText(dtf.format(now));
                            stm.setObject(7,dtf.format(now));
                            dtf = DateTimeFormatter.ofPattern("hh:mm:ss");
                            timeText.setText(dtf.format(now));
                            stm.setObject(3,dtf.format(now));
                            stm.setObject(4,units);
                            stm.setObject(5,voltage);
                            stm.setObject(6,accountNumText.getText());
                            
                            stm.setObject(8,dtf.format(now));
                            stm.setObject(9,units);
                            stm.setObject(10, voltage);
                            voltageText.setText(String.valueOf(voltage));
                            // stm.setObject(6,units);
                            //stm.setObject(7,accountNumText.getText());

                            // dateText.setText(dtf.format(now));

                            //dateText.setText(Double.toString(amperage));
                            unitText.setText(Double.toString(units));

                            int res=stm.executeUpdate();
                            uploadText.setText("Updated: "+res);
                            //System.out.println(regUploadText.getText());

                        } catch (RuntimeException e) {

                            /*JOptionPane.showMessageDialog(null,"Something wrong with your internet connection","Warning",2);
                            uploadButton.setEnabled(true);
                            logUploadButton.setEnabled(true);
                            plcText.setText("No Connection");
                            cloudText.setText("No Connection");
                            break;*/
                        } catch (InterruptedException | SQLException e) {

                            /* JOptionPane.showMessageDialog(null,"Something wrong with your internet connection","Warning",2);
                            uploadButton.setEnabled(true);
                            logUploadButton.setEnabled(true);
                            plcText.setText("No Connection");
                            cloudText.setText("No Connection");
                            break;*/
                            System.out.println("Please Check the slave ID");
                            e.printStackTrace();

                        } catch (ModbusProtocolException ex) {
                            JOptionPane.showMessageDialog(null,"MODBUS Failiure","Warning",2);
                            ex.printStackTrace();

                        } catch (ModbusNumberException ex) {
                            JOptionPane.showMessageDialog(null,"MODBUS Failiure","Warning",2);
                            ex.printStackTrace();
                        } catch (ModbusIOException ex) {
                            JOptionPane.showMessageDialog(null,"MODBUS Failiure","Warning",2);
                            ex.printStackTrace();
                        } finally {
                            try {
                                if(master!=null){
                                    master.disconnect();
                                }

                            } catch (ModbusIOException ex) {
                                JOptionPane.showMessageDialog(null,"MODBUS Failiure","Warning",2);
                                ex.printStackTrace();
                            }

                        }
                    }

                }

            };
            thread.start();

        }
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void cloudButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cloudButtonActionPerformed
        try {
            conn=DBConnection.getInstance(ipText.getText(),databaseText.getText(),userText.getText(),passText.getText()).getConnection();
            // stm=conn.prepareStatement("INSERT INTO dbo.Meter (MeterId,AccountNo,UpdatedDate,UpdatedTime,CurrentReading) "+"VALUES " + "(?,?,?,?,?)");
            stm=conn.prepareStatement("MERGE MeterReading AS target USING (SELECT ?,?,?,?,?) AS source (accountNo,updatedDate,updatedTime,currentReading,voltage) ON (target.accountNo = source.accountNo) WHEN MATCHED THEN UPDATE SET currentReading  = source.currentReading,updatedDate=source.updatedDate,updatedTime=source.updatedTime,voltage=source.voltage WHEN NOT MATCHED THEN  INSERT VALUES(?,?,?,?,?);");

            if(conn!=null/*&&master!=null*/){
                cloudStatusText.setText("Connected");
            }else{
                meterStatusText.setText("No Connection");
                cloudStatusText.setText("No Connection");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Something wrong with your internet connection or sqlError","Warning",2);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,"ClassNotFoundException","Error",0);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cloudButtonActionPerformed

    private void voltageTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltageTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_voltageTextActionPerformed
        private float getRealRegisterValue(int register1, int register2) {
        //Get binary string of register values
        String s1 = Integer.toBinaryString(register1);
        String s2 = Integer.toBinaryString(register2);
        
        //Append them respectively
        String b=s1+"0000000000000000";
       // String b=s1+s2;
        //get integer values 
        int intBits = Integer.parseInt(b, 2);
        System.out.println(intBits);
        //get float real value from IEEE 754 format
        float realValue = Float.intBitsToFloat(intBits);
        return realValue;   
    }
    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountNumText;
    private javax.swing.JButton cloudButton;
    private javax.swing.JTextField cloudStatusText;
    private javax.swing.JTextField databaseText;
    private javax.swing.JTextField dateText;
    private javax.swing.JTextField ipText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton meterButton;
    private javax.swing.JTextField meterStatusText;
    private javax.swing.JPasswordField passText;
    private javax.swing.JTextField timeText;
    private javax.swing.JTextField unitText;
    private javax.swing.JButton uploadButton;
    private javax.swing.JTextField uploadText;
    private javax.swing.JTextField userText;
    private javax.swing.JTextField voltageText;
    // End of variables declaration//GEN-END:variables
}
